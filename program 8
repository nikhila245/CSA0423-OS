#include <stdio.h>

struct Process {
    int id;         // Process ID
    int burst_time; // Burst Time
    int remaining_time; // Remaining Burst Time
    int waiting_time;   // Waiting Time
    int turnaround_time; // Turnaround Time
};

void findWaitingTime(struct Process proc[], int n, int quantum) {
    int time = 0; // Current time

    while (1) {
        int done = 1;

        for (int i = 0; i < n; i++) {
            // If burst time of a process is greater than 0 then only need to process further
            if (proc[i].remaining_time > 0) {
                done = 0; // There is a pending process

                if (proc[i].remaining_time > quantum) {
                    time += quantum;
                    proc[i].remaining_time -= quantum;
                } else {
                    time += proc[i].remaining_time;
                    proc[i].waiting_time = time - proc[i].burst_time;
                    proc[i].remaining_time = 0;
                }
            }
        }

        if (done == 1) {
            break;
        }
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

void findAverageTime(struct Process proc[], int n, int quantum) {
    findWaitingTime(proc, n, quantum);
    findTurnaroundTime(proc, n);

    int total_wt = 0, total_tat = 0;

    printf("Processes    Burst time    Waiting time    Turnaround time\n");

    for (int i = 0; i < n; i++) {
        total_wt += proc[i].waiting_time;
        total_tat += proc[i].turnaround_time;
        printf("   %d ", proc[i].id);
        printf("        %d ", proc[i].burst_time);
        printf("        %d ", proc[i].waiting_time);
        printf("            %d\n", proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
    int n, quantum;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &proc[i].burst_time);
        proc[i].remaining_time = proc[i].burst_time;
        proc[i].waiting_time = 0;
        proc[i].turnaround_time = 0;
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    findAverageTime(proc, n, quantum);

    return 0;
}
