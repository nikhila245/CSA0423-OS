#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

// Define structure for message
struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    struct msg_buffer message;
    key_t key;
    int msgid;

    // Generate a unique key for the message queue
    key = ftok("/tmp", 'A');

    // Create a message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    // Prompt user for input message
    printf("Enter a message to send to process 2: ");
    fgets(message.msg_text, sizeof(message.msg_text), stdin);
    message.msg_type = 1; // Message type (can be any positive number)

    // Send message to the queue
    if (msgsnd(msgid, &message, sizeof(message), 0) == -1) {
        perror("msgsnd");
        exit(1);
    }

    printf("Message sent to process 2: %s", message.msg_text);

    // Receive message from the queue (from process 2)
    if (msgrcv(msgid, &message, sizeof(message), 2, 0) == -1) {
        perror("msgrcv");
        exit(1);
    }

    printf("Message received from process 2: %s", message.msg_text);

    // Remove the message queue
    if (msgctl(msgid, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(1);
    }

    return 0;
}
