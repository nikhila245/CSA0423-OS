#include <stdio.h>
#include <limits.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // Burst Time
    int remaining_time; // Remaining Time
    int priority;       // Priority (lower value means higher priority)
    int waiting_time;   // Waiting Time
    int turnaround_time;// Turnaround Time
    int arrival_time;   // Arrival Time
};

void calculateTimes(struct Process proc[], int n) {
    int completed = 0, time = 0, min_priority_index;
    while (completed != n) {
        min_priority_index = -1;
        int min_priority = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (proc[i].arrival_time <= time && proc[i].remaining_time > 0 && proc[i].priority < min_priority) {
                min_priority = proc[i].priority;
                min_priority_index = i;
            }
        }

        if (min_priority_index == -1) {
            time++;
            continue;
        }

        proc[min_priority_index].remaining_time--;

        if (proc[min_priority_index].remaining_time == 0) {
            completed++;
            int finish_time = time + 1;
            proc[min_priority_index].turnaround_time = finish_time - proc[min_priority_index].arrival_time;
            proc[min_priority_index].waiting_time = proc[min_priority_index].turnaround_time - proc[min_priority_index].burst_time;
        }

        time++;
    }
}

void printProcesses(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;

    printf("PID\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].arrival_time, proc[i].priority, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("\nAverage Waiting Time = %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];
    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;
        printf("Enter burst time, arrival time, and priority for process %d: ", proc[i].pid);
        scanf("%d %d %d", &proc[i].burst_time, &proc[i].arrival_time, &proc[i].priority);
        proc[i].remaining_time = proc[i].burst_time;
    }

    calculateTimes(proc, n);
    printProcesses(proc, n);

    return 0;
}
